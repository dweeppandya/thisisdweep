{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \ud83d\udc4b Hi, I\u2019m @dweeppandya. I currently work as a Data Scientist in a leading FinTech company fighting Financial Crimes. \ud83d\udc40 I\u2019m an explorer, always looking for the next challenge. Coding to me is a stress-buster. \ud83c\udf31 I\u2019m currently exploring the vast meadows of data science and decision intelligence. Specifically, I'm working on using GANs and HPO algorithms to solve optimization problems. I'm also currently in the process of articulating what I learn through blogs/articles (links will be posted here soon!) \ud83d\udc9e\ufe0f I'd love to collaborate with you on any project/idea that involves optimization or that helps anybody in need. \ud83d\udceb Feel free to drop a note here: Email: dweep.pandya@gmail.com LinkedIn Professional Summary Data Scientist with > 3 years of experience working on datasets with 100+ million rows. Delivered Predictive (XGBoost/CatBoost/LightGBM), Recommendation and Clustering models to clients using Python. SQL proficiency. ML-based optimizations led to reduced efforts from 6 weeks to 2 hours significantly boosting ROI for the company. 2 papers published. Working knowledge of AML and Fraud Detection systems. Experience","title":"About"},{"location":"#about","text":"\ud83d\udc4b Hi, I\u2019m @dweeppandya. I currently work as a Data Scientist in a leading FinTech company fighting Financial Crimes. \ud83d\udc40 I\u2019m an explorer, always looking for the next challenge. Coding to me is a stress-buster. \ud83c\udf31 I\u2019m currently exploring the vast meadows of data science and decision intelligence. Specifically, I'm working on using GANs and HPO algorithms to solve optimization problems. I'm also currently in the process of articulating what I learn through blogs/articles (links will be posted here soon!) \ud83d\udc9e\ufe0f I'd love to collaborate with you on any project/idea that involves optimization or that helps anybody in need. \ud83d\udceb Feel free to drop a note here: Email: dweep.pandya@gmail.com LinkedIn","title":"About"},{"location":"#professional-summary","text":"Data Scientist with > 3 years of experience working on datasets with 100+ million rows. Delivered Predictive (XGBoost/CatBoost/LightGBM), Recommendation and Clustering models to clients using Python. SQL proficiency. ML-based optimizations led to reduced efforts from 6 weeks to 2 hours significantly boosting ROI for the company. 2 papers published. Working knowledge of AML and Fraud Detection systems.","title":"Professional Summary"},{"location":"#experience","text":"","title":"Experience"},{"location":"data_science/","text":"Data Science TensorFlow on \uf8ff Silicons","title":"Data Science"},{"location":"data_science/#data-science","text":"TensorFlow on \uf8ff Silicons","title":"Data Science"},{"location":"data_science/tensorflow/","text":"TensorFlow on Apple's M1 Chips As I was recently training some Recurrent Neural Networks (RNNs), I noticed that the training times were huge, even on my M1 pro. Having checked Activity Monitor I saw 0 % GPU utilization. This made me look-up on the internet on how I can make use of these silicon GPUs. This page lists down the steps I followed to achieve this and maybe they help you too! Before we begin with the steps here is my Macbook config: OS Requirements \ud83d\udcbb macOS 12.0+ ( latest beta ) Features Not Supported \u274c Multi-GPU support Acceleration for Intel GPUs V1 TensorFlow Networks 1. Setting up the Environment Both Anaconda and Miniforge are Python and R distributions that include conda, the python package manager and they will help you install tensorflow if you don't already have them. Note Its recommeded to install either Anaconda or Miniforge, installing both might lead to conflicts. Anaconda \ud83d\udc0d Although Anaconda earlier didn't support ARM architectures (Apple silicons), starting May 2022 they have officially released support for M1, hurray! \ud83c\udf89 Learn more here . Get the Individual Edition of Anaconda from here . Miniforge Minforge is a minimal installer for Conda and it allows you to install the conda package manager with dedicated support for ARM architectures including Apple's M1. This was the go to installer for Apple silicons before Anaconda started giving support. Here's the link to Miniforge. Optionally, if you already have Anaconda and want to go ahead with Miniforge, you'll have to remove the Anaconda files first. Else, you can skip to step 5 from below: Install anaconda-clean: conda install anaconda-clean Remove Anaconda files anaconda-clean --yes Remove the Anaconda directory which anaconda Remove all files from the folder from step 3: rm -rf YOUR-ANACONDA-DIRECTORY Install conda env: 1 2 3 chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh sh ~/Downloads/Miniforge3-MacOSX-arm64.sh source ~/miniforge3/bin/activate Create a Virtual Environment We'll create a virtual environment using conda in a terminal: conda create -n tensorflow_venv python = 3 .9 Next, lets activate it: conda activate tensorflow_venv 2. Install TensorFlow dependencies and base Now that we've got conda and the virtual environment setup, we can now install tensorflow's dependencies. Run the following command on your terminal: conda install -c apple tensorflow-deps Note If you already have tensorflow installed and want to upgrade, Apple recommends executing the following commands: 1 2 3 4 5 6 7 8 # Uninstall existing tensorflow-macos and tensorflow-metal python -m pip uninstall tensorflow-macos python -m pip uninstall tensorflow-metal # Upgrade tensorflow-deps conda install -c apple tensorflow-deps --force-reinstall # Or point to specific conda environment conda install -c apple tensorflow-deps --force-reinstall -n my_env Next, we'll install tensorflow's base: python -m pip install tensorflow-macos 3. Install TensorFlow's Metal Plugin Apple's Metal provides an API to power hardware-accelerated graphics on their platforms. Read more here . To enable tensorflow to utilize M1's GPU, we'll install metal: python -m pip install tensorflow-metal Voila! You're done! \ud83e\udd29 Reload your jupyter kernels and try running your tensorflow code. It should give you a message like this while model building:","title":"TensorFlow on \uf8ff Silicons"},{"location":"data_science/tensorflow/#tensorflow-on-apples-m1-chips","text":"As I was recently training some Recurrent Neural Networks (RNNs), I noticed that the training times were huge, even on my M1 pro. Having checked Activity Monitor I saw 0 % GPU utilization. This made me look-up on the internet on how I can make use of these silicon GPUs. This page lists down the steps I followed to achieve this and maybe they help you too! Before we begin with the steps here is my Macbook config:","title":"TensorFlow on Apple's M1 Chips"},{"location":"data_science/tensorflow/#os-requirements","text":"macOS 12.0+ ( latest beta )","title":"OS Requirements \ud83d\udcbb"},{"location":"data_science/tensorflow/#features-not-supported","text":"Multi-GPU support Acceleration for Intel GPUs V1 TensorFlow Networks","title":"Features Not Supported \u274c"},{"location":"data_science/tensorflow/#1-setting-up-the-environment","text":"Both Anaconda and Miniforge are Python and R distributions that include conda, the python package manager and they will help you install tensorflow if you don't already have them. Note Its recommeded to install either Anaconda or Miniforge, installing both might lead to conflicts.","title":"1. Setting up the Environment"},{"location":"data_science/tensorflow/#anaconda","text":"Although Anaconda earlier didn't support ARM architectures (Apple silicons), starting May 2022 they have officially released support for M1, hurray! \ud83c\udf89 Learn more here . Get the Individual Edition of Anaconda from here .","title":"Anaconda \ud83d\udc0d"},{"location":"data_science/tensorflow/#miniforge","text":"Minforge is a minimal installer for Conda and it allows you to install the conda package manager with dedicated support for ARM architectures including Apple's M1. This was the go to installer for Apple silicons before Anaconda started giving support. Here's the link to Miniforge. Optionally, if you already have Anaconda and want to go ahead with Miniforge, you'll have to remove the Anaconda files first. Else, you can skip to step 5 from below: Install anaconda-clean: conda install anaconda-clean Remove Anaconda files anaconda-clean --yes Remove the Anaconda directory which anaconda Remove all files from the folder from step 3: rm -rf YOUR-ANACONDA-DIRECTORY Install conda env: 1 2 3 chmod +x ~/Downloads/Miniforge3-MacOSX-arm64.sh sh ~/Downloads/Miniforge3-MacOSX-arm64.sh source ~/miniforge3/bin/activate","title":"Miniforge"},{"location":"data_science/tensorflow/#create-a-virtual-environment","text":"We'll create a virtual environment using conda in a terminal: conda create -n tensorflow_venv python = 3 .9 Next, lets activate it: conda activate tensorflow_venv","title":"Create a Virtual Environment"},{"location":"data_science/tensorflow/#2-install-tensorflow-dependencies-and-base","text":"Now that we've got conda and the virtual environment setup, we can now install tensorflow's dependencies. Run the following command on your terminal: conda install -c apple tensorflow-deps Note If you already have tensorflow installed and want to upgrade, Apple recommends executing the following commands: 1 2 3 4 5 6 7 8 # Uninstall existing tensorflow-macos and tensorflow-metal python -m pip uninstall tensorflow-macos python -m pip uninstall tensorflow-metal # Upgrade tensorflow-deps conda install -c apple tensorflow-deps --force-reinstall # Or point to specific conda environment conda install -c apple tensorflow-deps --force-reinstall -n my_env Next, we'll install tensorflow's base: python -m pip install tensorflow-macos","title":"2. Install TensorFlow dependencies and base"},{"location":"data_science/tensorflow/#3-install-tensorflows-metal-plugin","text":"Apple's Metal provides an API to power hardware-accelerated graphics on their platforms. Read more here . To enable tensorflow to utilize M1's GPU, we'll install metal: python -m pip install tensorflow-metal Voila! You're done! \ud83e\udd29 Reload your jupyter kernels and try running your tensorflow code. It should give you a message like this while model building:","title":"3. Install TensorFlow's Metal Plugin"},{"location":"gaming/","text":"Gaming","title":"Gaming"},{"location":"gaming/#gaming","text":"","title":"Gaming"},{"location":"gaming/minecraft/","text":"Minecraft","title":"Minecraft"},{"location":"gaming/minecraft/#minecraft","text":"","title":"Minecraft"}]}